<!-- Main -->
<script src="/assets/js/chartkick.js"></script>
<script src="/assets/js/highcharts.js"></script>
<section id="main" class="wrapper">
    <div class="inner">
	<header class="align-center">
          <h1><%= @country_name %> Medical Capacity Summary Report</h1>
            <p>The overview of current medical capacity summary of <%= @country_name %> </p>
	</header>




	<span class="image fit">
            <div id="mapid" style="width: 100%; height: <%= @map_h %>px;"></div>
	</span>
	<div class="box alt">
	    <div class="row 50% uniform">

			<!-- Break -->


		<div class="12u">
		    <%= column_chart Medicalsupply.group(:item, :province).sum(:quantity), title: "Medical Capacity Distribution" %>
		</div>

		<!-- Break -->

	    </div>
	</div>

    </div>
</section>

<!-- Scripts -->
<%= render "layouts/parts/scripts" %>

<script>

var map = L.map('mapid').setView([<%= @c_domain %>], <%= @zoom %>);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    maxZoom: 20,
    minZoom: 1 
}).addTo(map);


var provinces = [

    <% @provinces.each do |p| %>
	{
	    "type": "Feature",
	    "properties": {"province": "<%= p.name %>", "value": "<%= Medicalsupply.where(province: p.name, item: 'Masks').last.quantity rescue nil %>" },
	    "geometry": {
		"type": "<%= p.remark %>",
		"coordinates": <%= p.polygon.to_s %>
	}
	}, 
<% end %>
];
L.geoJSON(provinces).addTo(map);
///// provinces polygon finish ///

///// control that shows state info on hover
var info = L.control();

info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info');
    this.update();
    return this._div;
};

info.update = function (props) {
    this._div.innerHTML = '<h4>Medical Capacity Map</h4>' +
	(props ? '<b>' + props.province + '</b><br />' + props.value + " Masks" + '</b><br />' + '</b><br />' + "<a href='/welcome/details?supply_type=Medical&province=" + props.province + "'>" + "More Details" + "</a>" : 'Hover over a state');
};

info.addTo(map);
////// finish control that shows state info on hover

function getColor(d) {
    return  d > 300000 ? '#800026' :
	d > 300000  ? '#BD0026' :
	d > 250000  ? '#E31A1C' :
	d > 200000  ? '#FC4E2A' :
	d > 150000   ? '#FD8D3C' :
	d > 100000   ? '#FEB24C' :
	d > 50000   ? '#FED976' :
	d > 0   ? '#FFEDA0':
	'#FFFFFF';
}

function style(feature) {
    return {
	fillColor: getColor(feature.properties.value),
	weight: 1,
	opacity: 1,
	color: 'white',
	dashArray: '3',
	fillOpacity: 0.7
    };
}

function highlightFeature(e) {
    var layer = e.target;
    layer.setStyle({
	weight: 5,
	color: '#666',
	dashArray: '',
	fillOpacity: 0.7
    });
    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
	layer.bringToFront();
    }
    info.update(layer.feature.properties);
}

var geojson;

function resetHighlight(e) {
    geojson.resetStyle(e.target);
    info.update();
}

function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
}

function onEachFeature(feature, layer) {
    layer.on({
	mouseover: highlightFeature,
	mouseout: resetHighlight,
	click: zoomToFeature
    });
}

geojson = L.geoJson(provinces, {
    style: style,
    onEachFeature: onEachFeature
}).addTo(map);

var legend = L.control({position: 'bottomright'});

legend.onAdd = function (map) {
    var div = L.DomUtil.create('div', 'info legend'),
	grades = [50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000],
	labels = [],
	from, to;
    labels.push('<i style="background:' + getColor("FFFFFF") + '"></i> ' + '0');
    for (var i = 0; i < grades.length; i++) {
	from = grades[i];
	to = grades[i + 1];
	labels.push(
	    '<i style="background:' + getColor(from + 1) + '"></i> ' +
	    from + (to ? '&ndash;' + to : '+'));
    }
    div.innerHTML = labels.join('<br>');
    return div;
};

legend.addTo(map);


</script>
